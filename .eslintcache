[{"E:\\cra-template\\src\\index.tsx":"1","E:\\cra-template\\src\\reportWebVitals.ts":"2","E:\\cra-template\\src\\App.tsx":"3","E:\\cra-template\\src\\routes\\routes.tsx":"4","E:\\cra-template\\src\\constants\\index.ts":"5","E:\\cra-template\\src\\routes\\HomeRoutes.tsx":"6","E:\\cra-template\\src\\routes\\LoginRoutes.tsx":"7","E:\\cra-template\\src\\constants\\Resources.ts":"8","E:\\cra-template\\src\\constants\\Screens.ts":"9","E:\\cra-template\\src\\constants\\Strings.ts":"10","E:\\cra-template\\src\\constants\\Constants.ts":"11","E:\\cra-template\\src\\guards\\AuthenticatedGuard.tsx":"12","E:\\cra-template\\src\\app\\views\\home\\index.ts":"13","E:\\cra-template\\src\\app\\views\\auth\\index.ts":"14","E:\\cra-template\\src\\stores\\GlobalState.ts":"15","E:\\cra-template\\src\\app\\views\\auth\\LoginView.tsx":"16","E:\\cra-template\\src\\app\\views\\home\\HomeView.tsx":"17","E:\\cra-template\\src\\app\\views\\base\\BaseView.tsx":"18","E:\\cra-template\\src\\app\\models\\index.ts":"19","E:\\cra-template\\src\\app\\services\\index.ts":"20","E:\\cra-template\\src\\app\\controllers\\index.ts":"21","E:\\cra-template\\src\\app\\models\\HomeModel.ts":"22","E:\\cra-template\\src\\app\\models\\AuthModel.ts":"23","E:\\cra-template\\src\\app\\services\\AuthService.ts":"24","E:\\cra-template\\src\\app\\controllers\\LoginController.ts":"25","E:\\cra-template\\src\\app\\controllers\\HomeController.ts":"26","E:\\cra-template\\src\\app\\services\\HomeService.ts":"27","E:\\cra-template\\src\\commons\\utils\\index.ts":"28","E:\\cra-template\\src\\app\\models\\BaseModel.ts":"29","E:\\cra-template\\src\\app\\services\\BaseService.ts":"30","E:\\cra-template\\src\\app\\controllers\\BaseController.ts":"31","E:\\cra-template\\src\\commons\\utils\\Interface.ts":"32","E:\\cra-template\\src\\commons\\utils\\Helpers.ts":"33","E:\\cra-template\\src\\commons\\api\\APIAccessor.ts":"34"},{"size":500,"mtime":1609311207719,"results":"35","hashOfConfig":"36"},{"size":425,"mtime":1609311207719,"results":"37","hashOfConfig":"36"},{"size":1067,"mtime":1609311689469,"results":"38","hashOfConfig":"36"},{"size":319,"mtime":1609315562053,"results":"39","hashOfConfig":"36"},{"size":212,"mtime":1595222391408,"results":"40","hashOfConfig":"36"},{"size":398,"mtime":1609316770834,"results":"41","hashOfConfig":"36"},{"size":332,"mtime":1609316782240,"results":"42","hashOfConfig":"36"},{"size":211,"mtime":1609306229889,"results":"43","hashOfConfig":"36"},{"size":488,"mtime":1609306267687,"results":"44","hashOfConfig":"36"},{"size":1993,"mtime":1609306332070,"results":"45","hashOfConfig":"36"},{"size":4519,"mtime":1609319354779,"results":"46","hashOfConfig":"36"},{"size":913,"mtime":1609319245892,"results":"47","hashOfConfig":"36"},{"size":62,"mtime":1609307162789,"results":"48","hashOfConfig":"36"},{"size":67,"mtime":1609307888028,"results":"49","hashOfConfig":"36"},{"size":1026,"mtime":1609319059101,"results":"50","hashOfConfig":"36"},{"size":2882,"mtime":1609319190760,"results":"51","hashOfConfig":"36"},{"size":641,"mtime":1609309504284,"results":"52","hashOfConfig":"36"},{"size":3236,"mtime":1609317605531,"results":"53","hashOfConfig":"36"},{"size":120,"mtime":1609309340925,"results":"54","hashOfConfig":"36"},{"size":134,"mtime":1609307511368,"results":"55","hashOfConfig":"36"},{"size":152,"mtime":1609309389448,"results":"56","hashOfConfig":"36"},{"size":113,"mtime":1609307368461,"results":"57","hashOfConfig":"36"},{"size":224,"mtime":1609307977473,"results":"58","hashOfConfig":"36"},{"size":365,"mtime":1609310092745,"results":"59","hashOfConfig":"36"},{"size":1185,"mtime":1609319197445,"results":"60","hashOfConfig":"36"},{"size":327,"mtime":1609309377327,"results":"61","hashOfConfig":"36"},{"size":117,"mtime":1609307454306,"results":"62","hashOfConfig":"36"},{"size":94,"mtime":1609297688562,"results":"63","hashOfConfig":"36"},{"size":43,"mtime":1609299115858,"results":"64","hashOfConfig":"36"},{"size":153,"mtime":1609305954927,"results":"65","hashOfConfig":"36"},{"size":1375,"mtime":1609316441155,"results":"66","hashOfConfig":"36"},{"size":4486,"mtime":1606726881611,"results":"67","hashOfConfig":"36"},{"size":7060,"mtime":1595222391408,"results":"68","hashOfConfig":"36"},{"size":17482,"mtime":1609297617746,"results":"69","hashOfConfig":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"15tqi2c",{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"72"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":"141","usedDeprecatedRules":"72"},"E:\\cra-template\\src\\index.tsx",[],["142","143"],"E:\\cra-template\\src\\reportWebVitals.ts",[],"E:\\cra-template\\src\\App.tsx",[],"E:\\cra-template\\src\\routes\\routes.tsx",[],"E:\\cra-template\\src\\constants\\index.ts",[],"E:\\cra-template\\src\\routes\\HomeRoutes.tsx",[],"E:\\cra-template\\src\\routes\\LoginRoutes.tsx",[],"E:\\cra-template\\src\\constants\\Resources.ts",[],"E:\\cra-template\\src\\constants\\Screens.ts",[],"E:\\cra-template\\src\\constants\\Strings.ts",[],"E:\\cra-template\\src\\constants\\Constants.ts",["144","145"],"import { TEnvironment, TLanguage } from \"../commons/utils\";\r\n\r\nconst Constants = {\r\n\r\n    /**\r\n     * Config for api.\r\n     */\r\n    Api: {\r\n        /** Root URL of Api Server */\r\n        // BASE_URL: \"https://domain.com\", // Server Live\r\n        BASE_URL: \"http://localhost:8000/api\", // Server Test\r\n        CLIENT_CERT: null,\r\n        CLIENT_ID: null,\r\n        CLIENT_KEY: null,\r\n        /** Timeout for each request: 25sec */\r\n        TIMEOUT: 25 * 1000,\r\n\r\n        REPORT_IMG_ROOTPATH: \"/reports/\",\r\n        USER_IMG_ROOTPATH: \"/users/\"\r\n    },\r\n\r\n    /**\r\n     * Return code from Api\r\n     */\r\n    ApiCode: {\r\n        // Code from server api\r\n        SUCCESS: 200,\r\n\r\n        // Code from local app\r\n        CONNECTION_TIMEOUT: \"CONNECTION_TIMEOUT\",\r\n        INTERNAL_SERVER: \"INTERNAL_SERVER\",\r\n        UNKNOWN_NETWORK: \"UNKNOWN_NETWORK\",\r\n    },\r\n\r\n    /**\r\n     * Setting path for Api\r\n     */\r\n    ApiPath: {\r\n        // auth\r\n        REGISTER: \"/auth/register\",\r\n        LOGIN: \"/auth/login\",\r\n        LOGOUT: \"/auth/logout\",\r\n    },\r\n\r\n    /**\r\n     * Request methods\r\n     */\r\n    Methods: {\r\n        DELETE: \"DELETE\",\r\n        GET: \"GET\",\r\n        POST: \"POST\",\r\n        PUT: \"PUT\",\r\n    },\r\n\r\n    /**\r\n     * Styles for app.\r\n     *\r\n     * Color refer\r\n     * @see https://www.rapidtables.com/web/color/index.html\r\n     * @see https://www.w3schools.com/w3css/w3css_colors.asp\r\n     */\r\n    Styles: {\r\n        // =====================================================================\r\n        // Common color\r\n        // =====================================================================\r\n        BLACK_COLOR: \"#000000\",\r\n        BLUE_COLOR: \"#0000FF\",\r\n        GRAY_COLOR: \"#808080\",\r\n        GREEN_COLOR: \"#008000\",\r\n        LIGHTGRAY_COLOR: \"#D3D3D3\",\r\n        RED_COLOR: \"#FF0000\",\r\n        WHITE_COLOR: \"#FFFFFF\",\r\n\r\n        // New - Analysis - Processing - Processed - Cancelled - Close\r\n        STATUS_COLOR: [\"#27AE60\", \"#FEC600\", \"#24EBC7\", \"#00AFF0\", \"#D3D3D3\", \"#CED4DA\"],\r\n\r\n        // =====================================================================\r\n        // Console log style\r\n        // Color refer at: https://www.w3schools.com/w3css/w3css_colors.asp\r\n        // =====================================================================\r\n        CONSOLE_LOG_DONE_ERROR: \"border: 2px solid #F44336; color: #000000\", // Red\r\n        CONSOLE_LOG_DONE_SUCCESS: \"border: 2px solid #4CAF50; color: #000000\", // Green\r\n        CONSOLE_LOG_ERROR: \"background: #F44336; color: #FFFFFF\", // Red\r\n        CONSOLE_LOG_NOTICE: \"background: #FF9800; color: #000000; font-size: x-large\", // Orange\r\n        CONSOLE_LOG_PREPARE: \"border: 2px solid #2196F3; color: #000000\", // Blue\r\n        CONSOLE_LOG_START: \"background: #2196F3; color: #FFFFFF\", // Blue\r\n        CONSOLE_LOG_SUCCESS: \"background: #4CAF50; color: #FFFFFF\", // Green\r\n\r\n        // =====================================================================\r\n        // Common size\r\n        // =====================================================================\r\n        AVATAR_SIZE: \"80px\",\r\n        DEFAULT_FONTSIZE: \"16px\",\r\n        DEFAULT_SPACING: \"24px\",\r\n    },\r\n\r\n    /**\r\n     * Regex Expression\r\n     */\r\n    RegExp: {\r\n        EMAIL_ADDRESS: \"^(([^<>()\\\\[\\\\]\\\\\\\\.,;:\\\\s@`]+(\\\\.[^<>()\\\\[\\\\]\\\\\\\\.,;:\\\\s@`]+)*)|(`.+`))@((\\\\[[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\])|(([a-zA-Z\\\\-0-9]+\\\\.)+[a-zA-Z]{2,}))$\",\r\n        ORGANIZATION_SHORTNAME: \"^[A-Z0-9]{2,3}$\",\r\n        PASSWORD: \"^(?=.*[\\\\d])(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&*])[\\\\w!@#$%^&*]{8,}$\",\r\n        PHONE_NUMBER: \"^\\(?((0))\\)?([1|3|5|7|8|9]{1})?([0-9]{8})$\",\r\n        USERNAME: \"^[A-Za-z0-9]+(?:[._-][A-Za-z0-9]+)*$\",\r\n    },\r\n\r\n    /**\r\n     * Storage keys\r\n     */\r\n    StorageKeys: {\r\n        ACCESS_TOKEN: \"access_token\"\r\n    },\r\n\r\n    /**\r\n     * Cookie keys\r\n     */\r\n    CookieNames: {\r\n        LANGUAGE: \"lang\",\r\n        SESSION_ID: \"sessionId\"\r\n    },\r\n\r\n    /**\r\n     * Header name\r\n     */\r\n    HeaderNames: {\r\n        DURATION: \"X-Duration-Time\"\r\n    },\r\n\r\n    /**\r\n     * Event name using for DeviceEventEmitter\r\n     */\r\n    EventName: {\r\n    },\r\n\r\n    /**\r\n     * Environment\r\n     */\r\n    Environment: {\r\n        DEV: \"development\" as TEnvironment,\r\n        PRO: \"production\" as TEnvironment,\r\n    },\r\n\r\n    /**\r\n     * Language\r\n     */\r\n    Language: {\r\n        EN: \"en\" as TLanguage,\r\n        VI: \"vi\" as TLanguage,\r\n    },\r\n\r\n    /**\r\n     * Debounce time for action\r\n     */\r\n    DEBOUNCE_TIME: 400,\r\n\r\n};\r\n\r\nexport default Constants;\r\n","E:\\cra-template\\src\\guards\\AuthenticatedGuard.tsx",[],"E:\\cra-template\\src\\app\\views\\home\\index.ts",[],"E:\\cra-template\\src\\app\\views\\auth\\index.ts",[],"E:\\cra-template\\src\\stores\\GlobalState.ts",[],"E:\\cra-template\\src\\app\\views\\auth\\LoginView.tsx",["146"],"E:\\cra-template\\src\\app\\views\\home\\HomeView.tsx",[],"E:\\cra-template\\src\\app\\views\\base\\BaseView.tsx",["147"],"import React, { ComponentProps } from \"react\";\r\nimport BaseController from \"../../controllers/BaseController\";\r\nimport { onSnapshot } from \"mobx-state-tree\";\r\nimport { Helpers } from \"../../../commons/utils\";\r\nimport { GlobalState, ModelStorage } from \"../../../stores/GlobalState\";\r\nimport { History } from \"history\";\r\nimport { Container } from \"react-bootstrap\";\r\n\r\ninterface IProps {\r\n    history?: History;\r\n}\r\nclass BaseView<TController extends BaseController<{}, {}>, TModel, TService> extends React.Component<IProps> {\r\n\r\n    public readonly className: string;\r\n    public readonly controller: TController;\r\n    public readonly model: TModel;\r\n    public readonly service: TService;\r\n    public readonly history: History;\r\n\r\n    private mounted?: boolean;\r\n\r\n    constructor(props: any, controllerClass: any, modelClass: any, serviceClass: any) {\r\n        super(props);\r\n        this.className = this.constructor.name;\r\n        this.model = new modelClass();\r\n        this.service = new serviceClass(this.model);\r\n        this.controller = new controllerClass(props, this.model, this.service);\r\n        this.history = this.props.history as History;\r\n\r\n        // Copy passProps to model\r\n        Helpers.copyProperties(props, this.model);\r\n\r\n        this.state = this.model;\r\n        this.mounted = true;\r\n\r\n        onSnapshot(ModelStorage, () => {\r\n            this.mounted && this.setModel(ModelStorage.model);\r\n            if (!Helpers.isNullOrEmpty(GlobalState.currentScreen)) {\r\n                this.mounted && this.push(GlobalState.currentScreen);\r\n            }\r\n        });\r\n    }\r\n\r\n    public componentWillMount() {\r\n        this.controller.onBefore();\r\n    }\r\n\r\n    public componentDidMount() {\r\n        this.controller.onStarted();\r\n    }\r\n\r\n    public componentWillUnmount() {\r\n        this.mounted = false;\r\n        this.controller.onStop();\r\n    }\r\n\r\n    /**\r\n     * Update new data to model object\r\n     *\r\n     * @param {object} model Model data\r\n     * @param {function} callback Updated callback function\r\n     */\r\n    public setModel = (model: TModel, callback?: (changed: boolean) => void) => {\r\n        let isUpdate: boolean = false;\r\n        if (!Helpers.isNullOrEmpty(model)) {\r\n            for (const key in model) {\r\n                if (this.model[key] !== model[key]) {\r\n                    this.model[key] = model[key];\r\n                    isUpdate = true;\r\n                }\r\n            }\r\n            if (isUpdate) {\r\n                this.controller.updateModel(model);\r\n                this.setState(this.model, () => {\r\n                    if (Helpers.isFunction(callback)) {\r\n                        callback(isUpdate);\r\n                    }\r\n                });\r\n                return;\r\n            }\r\n        }\r\n        if (!isUpdate && Helpers.isFunction(callback)) {\r\n            callback(isUpdate);\r\n        }\r\n    }\r\n\r\n    public push = (screenName: string) => {\r\n        this.history.push(screenName);\r\n    }\r\n\r\n    public renderPage() {\r\n        return <div></div>;\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <Container fluid className=\"min-vh-100\">\r\n                {this.renderPage()}\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BaseView;\r\n","E:\\cra-template\\src\\app\\models\\index.ts",[],"E:\\cra-template\\src\\app\\services\\index.ts",[],"E:\\cra-template\\src\\app\\controllers\\index.ts",[],"E:\\cra-template\\src\\app\\models\\HomeModel.ts",[],"E:\\cra-template\\src\\app\\models\\AuthModel.ts",[],"E:\\cra-template\\src\\app\\services\\AuthService.ts",[],"E:\\cra-template\\src\\app\\controllers\\LoginController.ts",[],"E:\\cra-template\\src\\app\\controllers\\HomeController.ts",[],"E:\\cra-template\\src\\app\\services\\HomeService.ts",[],"E:\\cra-template\\src\\commons\\utils\\index.ts",[],"E:\\cra-template\\src\\app\\models\\BaseModel.ts",[],"E:\\cra-template\\src\\app\\services\\BaseService.ts",[],"E:\\cra-template\\src\\app\\controllers\\BaseController.ts",[],"E:\\cra-template\\src\\commons\\utils\\Interface.ts",[],"E:\\cra-template\\src\\commons\\utils\\Helpers.ts",[],"E:\\cra-template\\src\\commons\\api\\APIAccessor.ts",["148","149","150"],"import axios from \"axios\";\r\n\r\nimport {\r\n    Helpers,\r\n    IError,\r\n    IResult,\r\n} from \"../utils\";\r\nimport { Constants } from \"../../constants\";\r\n\r\nimport swal from \"@sweetalert/with-react\";\r\n/**\r\n * Interface for configuration for Axios library\r\n */\r\nexport interface IConfiguration {\r\n    // `baseURL` will be prepended to `url` unless `url` is absolute.\r\n    baseURL?: string;\r\n\r\n    // `url` is the server URL that will be used for the request\r\n    url?: string;\r\n\r\n    // `method` is the request method to be used when making the request\r\n    method?: Method;\r\n\r\n    // `timeout` specifies the number of milliseconds before the request times out.\r\n    // If the request takes longer than `timeout`, the request will be aborted.\r\n    timeout?: number; // default is `0` (no timeout)\r\n\r\n    // `headers` are custom headers to be sent\r\n    headers?: any;\r\n\r\n    // `params` are the URL parameters to be sent with the request\r\n    // Must be a plain object or a URLSearchParams object\r\n    params?: any;\r\n\r\n    // `data` is the data to be sent as the request body\r\n    // Only applicable for request methods \"PUT\", \"POST\", and \"PATCH\"\r\n    // When no `transformRequest` is set, must be of one of the following types:\r\n    // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\r\n    // - Browser only: FormData, File, Blob\r\n    // - Node only: Stream, Buffer\r\n    data?: any;\r\n}\r\n\r\n/**\r\n * Interface for response schema of Axios library\r\n */\r\nexport interface IResponse {\r\n    // `data` is the response that was provided by the server\r\n    data?: any;\r\n\r\n    // `status` is the HTTP status code from the server response\r\n    status?: number;\r\n\r\n    // `statusText` is the HTTP status message from the server response\r\n    statusText?: string;\r\n\r\n    // `headers` the headers that the server responded with\r\n    // All header names are lower cased\r\n    headers?: any;\r\n\r\n    // `config` is the config that was provided to `axios` for the request\r\n    config?: any;\r\n\r\n    // `request` is the request that generated this response\r\n    // It is the last ClientRequest instance in node.js (in redirects)\r\n    // and an XMLHttpRequest instance the browser\r\n    request?: any;\r\n}\r\n\r\n/**\r\n * Interface of Request\r\n */\r\nexport interface IRequest {\r\n    baseUrl?: string;\r\n    requestId?: number;\r\n    clientStartTime?: number;\r\n    clientEndTime?: number;\r\n    path: string;\r\n    method?: Method;\r\n    query?: any;\r\n    data?: any;\r\n    secure?: boolean;\r\n    timeout?: number;\r\n    headers?: any;\r\n    contentType?: ContentType;\r\n    onSuccess?: (result: IResult) => void;\r\n    onError?: (error: IError) => void;\r\n}\r\n\r\n/**\r\n * Enum for method\r\n */\r\nexport enum Method {\r\n    GET = \"GET\",\r\n    POST = \"POST\",\r\n    PUT = \"PUT\",\r\n    DELETE = \"DELETE\",\r\n}\r\n\r\n/**\r\n * Enum for content type\r\n */\r\nexport enum ContentType {\r\n    JSON = \"application/json\",\r\n    FORM = \"application/x-www-form-urlencoded\",\r\n    FORM_DATA = \"multipart/form-data\",\r\n}\r\n\r\n/**\r\n * APIAccessor.ts\r\n *\r\n * @see https://github.com/axios/axios\r\n * Promise based HTTP client for the react native.\r\n */\r\nclass APIAccessor {\r\n\r\n    // =========================================================================\r\n    // Static\r\n    // =========================================================================\r\n    public static instance = new APIAccessor();\r\n\r\n    /**\r\n     * Update config to common config of http client.\r\n     *\r\n     * @param {IConfiguration} config New config\r\n     * @param {boolean} forceUpdate Merge new config to common config if false, override if otherwise, default is false.\r\n     */\r\n    public static updateCommonConfig = (config: IConfiguration, forceUpdate: boolean = false) => {\r\n        if (forceUpdate === true) {\r\n            // APIAccessor.instance.config = config;\r\n        } else {\r\n            // APIAccessor.instance.config = {\r\n            //     ...APIAccessor.instance.config,\r\n            //     ...config\r\n            // };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Call api with POST method, using to upload file to server.\r\n     *\r\n     * @param {IRequest} request Request\r\n     */\r\n    public static postFormData = (request: IRequest): Promise<IResult> => {\r\n        request.method = Method.POST;\r\n        request.contentType = ContentType.FORM;\r\n        return new Promise((resolve, reject) => {\r\n            request.onSuccess = (result: IResult) => {\r\n                resolve(result);\r\n            };\r\n            request.onError = (error: IError) => {\r\n                reject(error);\r\n            };\r\n            APIAccessor.instance.fetch(request);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Call api with POST method.\r\n     *\r\n     * @param {IRequest} request Request\r\n     */\r\n    public static post = (request: IRequest): Promise<IResult> => {\r\n        request.method = Method.POST;\r\n        return new Promise((resolve, reject) => {\r\n            request.onSuccess = (result: IResult) => {\r\n                resolve(result);\r\n            };\r\n            request.onError = (error: IError) => {\r\n                reject(error);\r\n            };\r\n            APIAccessor.instance.fetch(request);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Call api with GET method.\r\n     *\r\n     * @param {IRequest} request Request\r\n     */\r\n    public static get = (request: IRequest): Promise<IResult> => {\r\n        request.method = Method.GET;\r\n        request.contentType = ContentType.FORM_DATA;\r\n        return new Promise((resolve, reject) => {\r\n            request.onSuccess = (result: IResult) => {\r\n                resolve(result);\r\n            };\r\n            request.onError = (error: IError) => {\r\n                reject(error);\r\n            };\r\n            APIAccessor.instance.fetch(request);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Call api with PUT method.\r\n     *\r\n     * @param {IRequest} request Request\r\n     */\r\n    public static put = (request: IRequest): Promise<IResult> => {\r\n        request.method = Method.PUT;\r\n        return new Promise((resolve, reject) => {\r\n            request.onSuccess = (result: IResult) => {\r\n                resolve(result);\r\n            };\r\n            request.onError = (error: IError) => {\r\n                reject(error);\r\n            };\r\n            APIAccessor.instance.fetch(request);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Call api with DELETE method.\r\n     *\r\n     * @param {IRequest} request Request\r\n     */\r\n    public static delete = (request: IRequest): Promise<IResult> => {\r\n        request.method = Method.DELETE;\r\n        return new Promise((resolve, reject) => {\r\n            request.onSuccess = (result: IResult) => {\r\n                resolve(result);\r\n            };\r\n            request.onError = (error: IError) => {\r\n                reject(error);\r\n            };\r\n            APIAccessor.instance.fetch(request);\r\n        });\r\n    }\r\n\r\n    private config: IConfiguration;\r\n    private httpClient: any;\r\n\r\n    constructor() {\r\n        // Create configuration for axios library\r\n        this.config = {\r\n            baseURL: Constants.Api.BASE_URL,\r\n            // headers: {\r\n            //     // \"Access-Control-Allow-Origin\": \"*\"\r\n            //     // \"Cache-Control\": \"no-cache\",\r\n            //     // \"Content-Type\": ContentType.JSON,\r\n            //     // \"Pragma\": \"no-cache\",\r\n            // },\r\n            // method: Method.GET,\r\n            timeout: Constants.Api.TIMEOUT,\r\n        };\r\n\r\n        // Create an instance using the config defaults provided by the library\r\n        this.httpClient = axios.create();\r\n    }\r\n\r\n    /**\r\n     * Main function fetching data from server.\r\n     *\r\n     * @param {IRequest} request Request.\r\n     */\r\n    public fetch = async (request: IRequest) => {\r\n        this.onBeforeCallback(request);\r\n\r\n        // create config for each request\r\n        const axiosConfig = await this.createAxiosConfig(request);\r\n        if (__DEV__) {\r\n            console.log(axiosConfig);\r\n            const { method, path, requestId } = request;\r\n            console.log(`%c ${requestId} - #fetch [${method}: ${path}] `, Constants.Styles.CONSOLE_LOG_START);\r\n            console.log(\"  > config :\", axiosConfig);\r\n        }\r\n        // request to server\r\n        this.httpClient.request(axiosConfig).then((response: Response) => {\r\n            this.onAfterCallback(request, response);\r\n            this.onSuccessCallback(request, response);\r\n        }).catch((error: any) => {\r\n            const response = error ? error.response : null;\r\n            this.onAfterCallback(request, response, error);\r\n            this.onErrorCallback(request, response, error);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Create config for each request.\r\n     *\r\n     * @param {IRequest} request Request.\r\n     */\r\n    private createAxiosConfig = async (request: IRequest): Promise<any> => {\r\n        const axiosConfig = {\r\n            ...this.config,\r\n            method: request.method,\r\n            url: request.path,\r\n        };\r\n        if (request.baseUrl) {\r\n            axiosConfig.baseURL = request.baseUrl;\r\n        }\r\n        // timeout\r\n        if (Helpers.isNumber(request.timeout)) {\r\n            axiosConfig.timeout = request.timeout;\r\n        }\r\n        // query string\r\n        if (!Helpers.isNullOrEmpty(request.query)) {\r\n            axiosConfig.params = { ...axiosConfig.params, ...request.query };\r\n        }\r\n        // data (IMPORTANT: not set data if method is GET)\r\n        if (axiosConfig.method !== Method.GET) {\r\n            axiosConfig.data = request.data;\r\n            // authentication\r\n            if (request.secure !== false) {\r\n                // Add logic for authentication\r\n                // add new secure to header or data or query string\r\n            }\r\n        }\r\n        // headers\r\n        if (!Helpers.isNullOrEmpty(request.contentType)) {\r\n            axiosConfig.headers = {\r\n                ...axiosConfig.headers,\r\n                [\"Content-Type\"]: request.contentType\r\n            };\r\n        }\r\n        const tokenInfo = sessionStorage.getItem(Constants.StorageKeys.ACCESS_TOKEN);\r\n        if (tokenInfo && !request.baseUrl) {\r\n            const tokenInfoObj = JSON.parse(tokenInfo);\r\n            axiosConfig.headers = {\r\n                ...axiosConfig.headers,\r\n                [\"Authorization\"]: tokenInfoObj.token_type + \" \" + tokenInfoObj.access_token\r\n            };\r\n        }\r\n        if (!Helpers.isNullOrEmpty(request.headers)) {\r\n            axiosConfig.headers = { ...axiosConfig.headers, ...request.headers };\r\n        }\r\n        return axiosConfig;\r\n    }\r\n\r\n    /**\r\n     * Function execute before request to server.\r\n     * Create request id and clientStartTime, using for monitoring and calculate request duration.\r\n     *\r\n     * @param {IRequest} request Request.\r\n     */\r\n    private onBeforeCallback = (request: IRequest) => {\r\n        request.clientStartTime = Date.now();\r\n        request.requestId = request.clientStartTime;\r\n        /* if (__DEV__) {\r\n            const { method, path, requestId } = request;\r\n            const clientStartTime = Helpers.dateToString(request.clientStartTime,\r\n                Strings.Common.MOMENT_DATETIME_FORMAT3);\r\n            console.log(`%c ${requestId} - #onBeforeCallback [${method}: ${path}]: `\r\n                + `clientStartTime=${clientStartTime} `, Constants.Styles.CONSOLE_LOG_PREPARE);\r\n            console.log(\"  > request :\", request);\r\n        } */\r\n    }\r\n\r\n    /**\r\n     * Function execute after received from server.\r\n     *\r\n     * @param {IRequest} request Request.\r\n     * @param {IResponse} response Response\r\n     * @param {any} error Error if has error, default is null\r\n     */\r\n    private onAfterCallback = (request: IRequest, response: IResponse, error: any = null) => {\r\n        request.clientEndTime = Date.now();\r\n        // if (__DEV__) {\r\n        //     const { method, path, requestId } = request;\r\n        //     const clientEndTime\r\n        // = Helpers.dateToString(request.clientEndTime, Strings.Common.MOMENT_DATETIME_FORMAT3);\r\n        //     const duration = `${request.clientEndTime - (request.clientStartTime || 0)}ms`;\r\n        //     console.log(`%c ${requestId} - #onAfterCallback [${method}: ${path}]: `\r\n        //         + `clientEndTime=${clientEndTime}, duration=${duration} `,\r\n        //         (error ? Constants.Styles.CONSOLE_LOG_DONE_ERROR : Constants.Styles.CONSOLE_LOG_DONE_SUCCESS));\r\n        // }\r\n    }\r\n\r\n    /**\r\n     * Execute after end request if success\r\n     *\r\n     * @param {IRequest} request Request.\r\n     * @param {IResponse} response Response\r\n     */\r\n    private onSuccessCallback = (request: IRequest, response: IResponse) => {\r\n        const data = response.data;\r\n        if (__DEV__) {\r\n            const { method, path, requestId } = request;\r\n            const config: any = response.config || {};\r\n            console.log(`%c ${requestId} - #onSuccessCallback [${method}: ${path}] `,\r\n                Constants.Styles.CONSOLE_LOG_SUCCESS);\r\n            // console.log(\"  > request      :\", request);\r\n            console.log(\"  > response     :\", response);\r\n            console.log(\"  > requestData  :\", config.data);\r\n            console.log(\"  \", JSON.stringify(config.data));\r\n            console.log(\"  > responseData :\", JSON.stringify(data));\r\n            console.log(\"  \", data);\r\n        }\r\n        // TODO: check business status\r\n        if (response.status === Constants.ApiCode.SUCCESS) {\r\n            if (Helpers.isFunction(request.onSuccess)) {\r\n                request.onSuccess({ data, response });\r\n            }\r\n        } else {\r\n            // const messages: any = Strings.Message;\r\n            // const message = messages[data.code] || data.message || messages.NOT_DEFINE;\r\n            const error = {\r\n                code: response.status,\r\n                // message\r\n            };\r\n            // if (!Helpers.isNullOrEmpty(data.code) && (data.code.indexOf(\"99\") === 0)) {\r\n            //     DeviceEventEmitter.emit(Constants.EventName.COMMON_ERROR, error);\r\n            // }\r\n            if (Helpers.isFunction(request.onError)) {\r\n                request.onError(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Execute after end request if error\r\n     *\r\n     * @param {IRequest} request Request.\r\n     * @param {IResponse} response Response\r\n     * @param {any} error Error\r\n     */\r\n    private onErrorCallback = (request: IRequest, response: IResponse, error: any) => {\r\n        if (__DEV__) {\r\n            const { method, path, requestId } = request;\r\n            console.log(`%c ${requestId} - #onErrorCallback [${method}: ${path}] `, Constants.Styles.CONSOLE_LOG_ERROR);\r\n            console.log(\"  > request  :\", request);\r\n            console.log(\"  > response :\", response);\r\n            console.log(\"  > error    :\", error);\r\n        }\r\n        // Error handler\r\n        if (error) {\r\n            if (Helpers.isNullOrEmpty(error.code) && Helpers.isNullOrEmpty(error.response)) {\r\n                // Error unknown network\r\n                if (\"NETWORK ERROR\" === Helpers.trim(error.message).toUpperCase()) {\r\n                    if (__DEV__) {\r\n                        console.warn(\"#onErrorCallback: Error unknown network\");\r\n                    }\r\n                    if (Helpers.isFunction(request.onError)) {\r\n                        // swal(\"Không tìm thấy kết nối mạng !\", { icon: \"error\" });\r\n                        // const messages: any = Strings.Message;\r\n                        request.onError({\r\n                            code: Constants.ApiCode.UNKNOWN_NETWORK,\r\n                            // message: messages[Constants.ApiCode.UNKNOWN_NETWORK]\r\n                        } as IError);\r\n                    }\r\n                    return;\r\n                }\r\n            }\r\n\r\n            // Error connection timeout\r\n            if (error.code === \"ECONNABORTED\") {\r\n                swal(\"Kết nối không phản hồi, vui lòng thử lại sau !\", { icon: \"error\" });\r\n                if (__DEV__) {\r\n                    console.warn(\"#onErrorCallback: Error connection timeout\");\r\n                }\r\n                if (Helpers.isFunction(request.onError)) {\r\n                    // const messages: any = Strings.Message;\r\n                    request.onError({\r\n                        code: Constants.ApiCode.CONNECTION_TIMEOUT,\r\n                        // message: messages[Constants.ApiCode.CONNECTION_TIMEOUT]\r\n                    } as IError);\r\n                }\r\n                return;\r\n            }\r\n\r\n            if (response) {\r\n                // Log error to debug console\r\n                if (response.data && response.data.error_description) {\r\n                    if (__DEV__) {\r\n                        console.warn(`#onErrorCallback: ${response.data.error_description}`);\r\n                    }\r\n                }\r\n\r\n                // Error server\r\n                if (!Helpers.isNullOrEmpty(response.status)) {\r\n                    if (__DEV__) {\r\n                        console.warn(\"#onErrorCallback: Error server\");\r\n                    }\r\n                    if (Helpers.isFunction(request.onError)) {\r\n                        const messages: any = \"\";\r\n                        request.onError({\r\n                            code: Constants.ApiCode.INTERNAL_SERVER,\r\n                            message: response.data,\r\n                        } as IError);\r\n                    }\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default APIAccessor;\r\n",{"ruleId":"151","replacedBy":"152"},{"ruleId":"153","replacedBy":"154"},{"ruleId":"155","severity":1,"message":"156","line":104,"column":25,"nodeType":"157","messageId":"158","endLine":104,"endColumn":26,"suggestions":"159"},{"ruleId":"155","severity":1,"message":"160","line":104,"column":33,"nodeType":"157","messageId":"158","endLine":104,"endColumn":34,"suggestions":"161"},{"ruleId":"162","severity":1,"message":"163","line":14,"column":10,"nodeType":"164","messageId":"165","endLine":14,"endColumn":17},{"ruleId":"162","severity":1,"message":"166","line":1,"column":17,"nodeType":"164","messageId":"165","endLine":1,"endColumn":31},{"ruleId":"167","severity":1,"message":"168","line":314,"column":17,"nodeType":"169","messageId":"170","endLine":314,"endColumn":54,"fix":"171"},{"ruleId":"167","severity":1,"message":"172","line":322,"column":17,"nodeType":"169","messageId":"170","endLine":322,"endColumn":93,"fix":"173"},{"ruleId":"162","severity":1,"message":"174","line":476,"column":31,"nodeType":"164","messageId":"165","endLine":476,"endColumn":44},"no-native-reassign",["175"],"no-negated-in-lhs",["176"],"no-useless-escape","Unnecessary escape character: \\(.","Literal","unnecessaryEscape",["177","178"],"Unnecessary escape character: \\).",["179","180"],"@typescript-eslint/no-unused-vars","'Helpers' is defined but never used.","Identifier","unusedVar","'ComponentProps' is defined but never used.","no-useless-computed-key","Unnecessarily computed property [\"Content-Type\"] found.","Property","unnecessarilyComputedProperty",{"range":"181","text":"182"},"Unnecessarily computed property [\"Authorization\"] found.",{"range":"183","text":"184"},"'messages' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"messageId":"185","fix":"186","desc":"187"},{"messageId":"188","fix":"189","desc":"190"},{"messageId":"185","fix":"191","desc":"187"},{"messageId":"188","fix":"192","desc":"190"},[9862,9878],"\"Content-Type\"",[10212,10229],"\"Authorization\"","removeEscape",{"range":"193","text":"194"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"195","text":"196"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"197","text":"194"},{"range":"198","text":"196"},[3577,3578],"",[3577,3577],"\\",[3585,3586],[3585,3585]]